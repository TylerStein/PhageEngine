#pragma once
#include "pAsset.h"
#include "glm\vec3.hpp"
#include "pLight.h"
#include "pImage.h"
#include "pShader.h"
#include "pEnums.h"
#include <vector>




struct MaterialInfo {
	glm::vec3 diffuse;
	glm::vec3 ambient;
	glm::vec3 specular;
	glm::vec3 emission;
	GLfloat shininess;
	pImage* diffuseTexture;
	pImage* specularTexture;
	pImage* bumpTexture;
	bool useLight;

	void reset() {
		diffuse = glm::vec3(1.0f);
		ambient = glm::vec3(0.1f);
		specular = glm::vec3(1.0f);
		emission = glm::vec3(0.0f);
		shininess = 0.7f;
		diffuseTexture = NULL;
		specularTexture = NULL;
		bumpTexture = NULL;
		useLight = true;
	}

	void copyFrom(MaterialInfo other) {
		diffuse = other.diffuse;
		ambient = other.ambient;
		specular = other.specular;
		emission = other.emission;
		shininess = other.shininess;
		diffuseTexture = other.diffuseTexture;
		specularTexture = other.specularTexture;
		bumpTexture = other.bumpTexture;
		useLight = other.useLight;
	}
};

class pMaterial : public pAsset
{
public:
	pType type;

	//Mateial requires a name, a shader, material data, and textures (can be none)
	pMaterial(std::string name, pShader* matShader, MaterialInfo matInfo);
	~pMaterial();

	std::string getName() override;

	//Set the three video matrices
	void setViewMatrices(glm::mat4 modelMatrix, glm::mat4 viewMatrix, glm::mat4 projectionMatrix);
	
	//Set the diffuse color rgb
	void setDiffuseColor(glm::vec3 diffuseColor, bool sendToShader);
	//Set the specular color rgb
	void setSpecularColor(glm::vec3 specularColor, bool sendToShader);
	//Set the ambient color rgb
	void setAmbientColor(glm::vec3 ambientColor, bool sendToShader);
	//Set the shininess float value
	void setShininess(GLfloat shininess, bool sendToShader);
	//Set the emission color rgb
	void setEmission(glm::vec3 emissionColor, bool sendToShader);

	//Set the diffuse texture pImage
	void setDiffuseTexture(pImage* tex, bool sendToShader);
	//Set the specular texture pImage
	void setSpecularTexture(pImage* tex, bool sendToShader);
	//Set the bumpmap texture pImage
	void setBumpTexture(pImage* tex, bool sendToShader);

	void setLightSources(std::vector<pLight*> lights);

	void setUseLight(bool use);

	GLuint getModelMatrixID();
	GLuint getViewMatrixID();
	GLuint getProjectionMatrixID();
	GLuint getNormalMatrixID();

	//Return the shader ID generated by OpenGL
	GLuint getShaderProgramID();

	void useMaterial();
	void unuseMaterial();

	pShader* getShader();
	void setShader(pShader* newShader);
private:
	MaterialInfo mat;
	std::string name;
	pShader* shader;
};


#pragma once
#include "pAsset.h"
#include "glm\vec3.hpp"
#include "pLight.h"
#include "pImage.h"
#include "pShader.h"
#include "pEnums.h"
#include <vector>




struct MaterialInfo {
	glm::vec3 diffuse;
	glm::vec3 ambient;
	glm::vec3 specular;
	float shininess;
	pImage* diffuseTexture;
	pImage* specularTexture;
	pImage* bumpTexture;
};

class pMaterial : public pAsset
{
public:
	pType type;

	//Mateial requires a name, a shader, material data, and textures (can be none)
	pMaterial(std::string name, pShader* matShader, MaterialInfo matInfo);
	~pMaterial();

	std::string getName() override;

	//Set the three video matrices
	void setViewMatrices(glm::mat4 modelMatrix, glm::mat4 viewMatrix, glm::mat4 projectionMatrix);

	//Set the diffuse color rgb
	void setDiffuseColor(glm::vec3 diffuseColor);
	//Set the specular color rgb
	void setSpecularColor(glm::vec3 specularColor);
	//Set the ambient color rgb
	void setAmbientColor(glm::vec3 ambientColor);
	//Set the shininess float value
	void setShininess(GLfloat shininess);

	//Set the diffuse texture pImage
	void setDiffuseTexture(pImage* tex);
	//Set the specular texture pImage
	void setSpecularTexture(pImage* tex);
	//Set the bumpmap texture pImage
	void setBumpTexture(pImage* tex);

	GLuint getModelMatrixID();
	GLuint getViewMatrixID();
	GLuint getProjectionMatrixID();

	//Return the shader ID generated by OpenGL
	GLuint getShaderProgramID();

	void setLightEffect(Light light);

	void useTextures();

private:
	MaterialInfo matInfo;
	std::string name;
	pShader* shader;
};

